{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#cloudfspy","title":"Cloudfspy","text":"<p>Cloudfspy is a Python package that provides a <code>pathlib.Path</code> kind of interface, for working with cloud storage services. It is designed to be easy to use and to provide a consistent interface for working with different cloud storage services. Currently <code>Cloudfspy</code> supports the following cloud storage services:</p> <ul> <li>Google Cloud Storage (supported)</li> <li>Amazon S3 (coming soon)</li> <li>Azure Blob Storage (coming soon)</li> <li>Google Drive (coming soon)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>The package is available on PyPI and can be installed using pip:</p> <pre><code>pip install cloudfspy\n</code></pre>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> </ul>"},{"location":"#build-the-documentation","title":"Build the documentation","text":"<p>To build the documentation you need to install the dev dependencies:</p> <pre><code>poetry install --with dev\nmkdocs build\nmkdocs serve -a localhost:8000\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To use the library you need to import it:</p> <pre><code>import cloudfspy\nfrom cloudfspy import GenericPath as Path\n\n# set the cache folder\ncloudfspy.set_cache_folder(\"cache\")\ncloudfspy.clear_cache_folder()\n\nfrom_path = Path(\"/Users/haruiz/Desktop/Archive.zip\")\nto_path = Path(\"gs://gpr-studio-data/Archive.zip\")\n\nfrom_path.upload_to(to_path)\nwith open(to_path, \"rb\") as f:\n    data = f.read()\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>If you would like to contribute to the project, please contact the maintainers to discuss the changes you would like to make. We welcome contributions from everyone, and are grateful for even the smallest contributions.</p>"},{"location":"tutorials/getting_started/","title":"Hello World","text":""},{"location":"tutorials/getting_started/#getting-started-with-cloudfspy","title":"Getting started with cloudfspy","text":"<p><code>cloudFspy</code> provides an api based on <code>pathlib.Path</code> to access files on cloud storage services. It is a wrapper, similar to <code>fsspec</code>, around the <code>fsspec</code> library, which provides a common interface to many different file systems. <code>cloudFspy</code> is designed to be easy to use and to provide a consistent interface to access files on cloud storage services.This tutorial will show you how to use <code>cloudFspy</code> to access files on cloud storage services.</p>"},{"location":"tutorials/getting_started/#downloading-and-uploading-files","title":"Downloading and Uploading Files","text":"<p>We start by importing the <code>GenericPath</code> class from the <code>cloudFspy</code> library. We can then use the <code>GenericPath</code> class to access files on cloud storage services.</p> <pre><code>import cloudfspy\nfrom cloudfspy import GenericPath as Path\n</code></pre> <p>The <code>set_cache_folder</code> and <code>clear_cache_folder</code> methods enable the configuration and purging of the cache directory. This directory serves as a temporary storage area for files fetched from the cloud, facilitating efficient access to large files without the need for repeated downloads. Future enhancements will introduce various caching tactics. Presently, our caching approach involves transferring the file to the cache directory for subsequent access. If a file in the cache is more than two days old, it will be re-downloaded. We aim to make this behavior adjustable in upcoming updates.</p> <pre><code># set the cache folder\ncloudfspy.set_cache_folder(\"cache\")\ncloudfspy.clear_cache_folder()\n</code></pre> <p>Downloading files</p> <pre><code>from_path = Path(\"gs://gpr-studio-data/Archive.zip\")\nto_path = Path(\"/Users/haruiz/Desktop/Archive.zip\")\n\nfrom_path.download_to(to_path)\nwith open(to_path, \"rb\") as f:\n    data = f.read()\n</code></pre> <pre><code>Downloading file: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22.5M/22.5M [00:00&lt;00:00, 30.5MiB/s]\n</code></pre> <p>Uploading Files</p> <pre><code>from_path = Path(\"/Users/haruiz/Desktop/Archive.zip\")\nto_path = Path(\"gs://gpr-studio-data/Archive.zip\")\n\nfrom_path.upload_to(to_path)\nwith open(to_path, \"rb\") as f:\n    data = f.read()\n</code></pre> <pre><code>Uploading file:  93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 21.0M/22.5M [00:10&lt;00:00, 2.07MB/s]\nDownloading file: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22.5M/22.5M [00:00&lt;00:00, 30.8MiB/s]\n</code></pre> <pre><code>cloudfspy.list_cache_folder(max_levels=5)\n</code></pre> <pre><code>cache\n    - gpr-studio-data\n        - Archive.zip\n</code></pre>"},{"location":"tutorials/getting_started/#creating-and-deleting-folders","title":"creating and deleting folders","text":"<p>The <code>mkdir</code> and <code>rmdir</code> methods are used to create and delete folders, respectively. The <code>mkdir</code> method creates a folder at the specified path, while the <code>rmdir</code> method deletes the folder at the specified path. </p> <pre><code>path = Path(\"gs://gpr-studio-data/test_folder/\")\npath.mkdir(exist_ok=True, parents=True)\npath.exists()\n</code></pre> <pre><code>True\n</code></pre> <pre><code>path.rmdir()\npath.exists()\n</code></pre> <pre><code>False\n</code></pre>"}]}